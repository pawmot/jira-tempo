import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
    ext.kotlin_ver = '1.2.41'

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/libs-release' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_ver"
        classpath "gradle.plugin.com.pawmot:dockerize-spring-boot:$docker_plugin_ver"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_ver"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_ver"
    }
}

group 'com.pawmot'
version '0.3-SNAPSHOT'

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.pawmot.dockerize-spring-boot'

repositories {
    mavenCentral()
    maven {
        url 'https://m2proxy.atlassian.com/repository/public'
    }
}

dependencyManagement {
    imports {
        mavenBom SpringBootPlugin.BOM_COORDINATES
    }

    dependencies {
        dependency "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_ver"
        dependency "org.jetbrains.kotlin:kotlin-reflect:$kotlin_ver"
        dependency "org.jasypt:jasypt:$jasypt_ver"
    }
}

dependencies {
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    compile 'org.jetbrains.kotlin:kotlin-reflect'

    compile 'org.springframework.boot:spring-boot-starter-webflux'
    compile 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin'

    compile 'org.jasypt:jasypt'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.junit.jupiter:junit-jupiter-engine'
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}
compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.7'
}

task frontendNpmInstall(type:Exec) {
    group = BasePlugin.BUILD_GROUP
    workingDir "$projectDir/src/main/frontend"
    commandLine 'npm', 'install'
    inputs.files 'package.json'
    outputs.dir 'node_modules'
}

task frontendDistBuild(type: Exec) {
    group = BasePlugin.BUILD_GROUP
    workingDir "$projectDir/src/main/frontend"
    commandLine 'ng', 'build', '--prod'
    inputs.dir "$projectDir/src/main/frontend"
    outputs.dir "$projectDir/src/main/frontend/dist"
}

frontendDistBuild.dependsOn(frontendNpmInstall)

task frontendDistCopy(type: Copy) {
    from 'src/main/frontend/dist'
    into "${project.buildDir}/docker/dist"
}

frontendDistCopy.dependsOn(frontendDistBuild)

docker {
    imageName "pawmot/jira-tempo"
    tag project.version
}

dockerize.dependsOn(frontendDistCopy)
